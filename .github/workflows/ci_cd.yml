name: CI/CD - Build, Push & Deploy

on:
  push:
    branches:
      - "**"

jobs:
  build-and-push:
    name: CD - Build & Push Images
    runs-on: ubuntu-latest
    if: ${{ (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd')) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u fakraze --password-stdin

      - name: Set image tag
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "develop" ]]; then
            echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "IMAGE_TAG=ci-${SHORT_SHA}" >> $GITHUB_ENV
          fi

      - name: Build & Push Frontend
        run: |
          docker build -t ghcr.io/fakraze/cloud-meal-frontend:${{ env.IMAGE_TAG }} ./frontend
          docker push ghcr.io/fakraze/cloud-meal-frontend:${{ env.IMAGE_TAG }}

      - name: Build & Push Backend
        run: |
          docker build -t ghcr.io/fakraze/cloud-meal-backend:${{ env.IMAGE_TAG }} ./backend
          docker push ghcr.io/fakraze/cloud-meal-backend:${{ env.IMAGE_TAG }}

  deploy:
    name: CD - Deploy to K3s
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ success() && (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd') }}

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ec2-3-89-254-174.compute-1.amazonaws.com >> ~/.ssh/known_hosts

      - name: SSH and deploy to K3s
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@ec2-3-89-254-174.compute-1.amazonaws.com << 'EOF'
            set -e

            BRANCH_NAME="${{ github.ref_name }}"
            if [ "$BRANCH_NAME" = "main" ]; then
              NAMESPACE="cloudnative"
              IMAGE_TAG="latest"
              NAMESPACE_FILE="k8s/namespace-prod.yaml"
              INGRESS_FILE="k8s/ingress-prod.yaml"
            else
              NAMESPACE="cloudnative-dev"
              IMAGE_TAG="dev"
              NAMESPACE_FILE="k8s/namespace-dev.yaml"
              INGRESS_FILE="k8s/ingress-dev.yaml"
            fi

            echo "📁 確認專案"
            if [ ! -d ~/Cloud-Native-final ]; then
              git clone https://github.com/${{ github.repository }}.git ~/Cloud-Native-final
            fi

            cd ~/Cloud-Native-final
            git fetch origin
            git checkout $BRANCH_NAME
            git reset --hard origin/$BRANCH_NAME

            echo "📦 注入正確 GHCR image tag ($IMAGE_TAG)"
            sed -i "s|image: cloud-meal-frontend:local|image: ghcr.io/fakraze/cloud-meal-frontend:$IMAGE_TAG|" k8s/frontend-deployment.yaml
            sed -i "s|image: cloud-meal-backend:local|image: ghcr.io/fakraze/cloud-meal-backend:$IMAGE_TAG|" k8s/backend-deployment.yaml

            echo "🚀 Deploying to $NAMESPACE"
            sudo k3s kubectl apply -f $NAMESPACE_FILE
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-service.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-service.yaml
            sudo k3s kubectl apply -f $INGRESS_FILE
            
            # ✨ 強制 frontend 拉最新 image
            sudo k3s kubectl rollout restart deployment frontend -n $NAMESPACE
            sudo k3s kubectl rollout restart deployment backend -n $NAMESPACE

            echo "✅ Done."
          EOF

  e2e-tests:
    name: CD - E2E Cypress Tests
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: test
        run: npm install

      - name: Run Cypress tests
        working-directory: test
        run: npm run test

      - name: Upload Cypress Artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-artifacts
          path: |
            test/cypress/videos
            test/cypress/screenshots
