name: CI/CD - Build, Push & Deploy

on:
  push:
    branches:
      - "**"

jobs: 
  ci-tests:
    name: CI - Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Backend Testing
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      # - name: Run backend ESLint
      #   working-directory: ./backend
      #   run: npm run lint

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test

      - name: Run backend test coverage
        working-directory: ./backend
        run: npm run test:cov
      
      # Frontend Testing
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      # - name: Run frontend ESLint
      #   working-directory: ./frontend
      #   run: npm run lint

      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:run
        continue-on-error: true  # ÂÖÅË®±Ê∏¨Ë©¶Â§±Êïó‰ΩÜ‰∏çÈòªÊ≠¢ pipeline

      - name: Run frontend test coverage
        working-directory: ./frontend
        run: npm run test:coverage
        continue-on-error: true  # ÂÖÅË®±Ê∏¨Ë©¶Â§±Êïó‰ΩÜ‰∏çÈòªÊ≠¢ pipeline

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      # upload
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  build-and-push:
    name: CD - Build & Push Images
    runs-on: ubuntu-latest
    needs: ci-tests
    if: ${{ success() && (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u fakraze --password-stdin

      - name: Set image tag
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "develop" || "${GITHUB_REF_NAME}" == 'ci-cd' ]]; then
            echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "IMAGE_TAG=ci-${SHORT_SHA}" >> $GITHUB_ENV
          fi

      - name: Build & Push Frontend
        run: | # Ê†πÊìöÂàÜÊîØË®≠ÂÆöÁí∞Â¢ÉËÆäÊï∏
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            BASE_PATH="/"
            BUILD_MODE="production"
            API_URL="http://13.218.27.133/backend/api"
          else
            BASE_PATH="/dev/frontend/"
            BUILD_MODE="development"
            API_URL="http://13.218.27.133/dev/backend/api"
          fi

          echo "üì¶ Building with:"
          echo "    VITE_BASE_PATH=$BASE_PATH"
          echo "    VITE_API_URL=$API_URL"
          echo "    BUILD_MODE=$BUILD_MODE"
          echo "    IMAGE_TAG=${{ env.IMAGE_TAG }}"

          docker build \
            --build-arg VITE_BASE_PATH=$BASE_PATH \
            --build-arg VITE_API_URL=$API_URL \
            --build-arg BUILD_MODE=$BUILD_MODE \
            -t ghcr.io/fakraze/cloud-meal-frontend:${{ env.IMAGE_TAG }} \
            ./frontend

          docker push ghcr.io/fakraze/cloud-meal-frontend:${{ env.IMAGE_TAG }}

      - name: Build & Push Backend
        run: |
          # Set backend environment variables based on branch
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            NODE_ENV="production"
            DB_HOST="mysql"
          else
            NODE_ENV="development"
            DB_HOST="mysql"
          fi

          echo "üì¶ Building backend with:"
          echo "    NODE_ENV=$NODE_ENV"
          echo "    DB_HOST=$DB_HOST"
          echo "    IMAGE_TAG=${{ env.IMAGE_TAG }}"          

          docker build \
            --build-arg NODE_ENV=$NODE_ENV \
            --build-arg DB_HOST=$DB_HOST \
            --build-arg DB_PORT=3306 \
            --build-arg DB_DATABASE=${{ secrets.MYSQL_DATABASE }} \
            --build-arg DB_USERNAME=${{ secrets.MYSQL_USER }} \
            --build-arg DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            --build-arg BACKEND_PORT=3000 \
            -t ghcr.io/fakraze/cloud-meal-backend:${{ env.IMAGE_TAG }} \
            ./backend

          docker push ghcr.io/fakraze/cloud-meal-backend:${{ env.IMAGE_TAG }}
  deploy:
    name: CD - Deploy to K3s
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ success() && (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd') }}

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ec2-13-218-27-133.compute-1.amazonaws.com >> ~/.ssh/known_hosts

      - name: SSH and deploy to K3s
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: | # Pass environment variables to SSH session
          ssh -i ~/.ssh/id_rsa ubuntu@ec2-13-218-27-133.compute-1.amazonaws.com \
            "export MYSQL_ROOT_PASSWORD='$MYSQL_ROOT_PASSWORD'; \
             export MYSQL_DATABASE='$MYSQL_DATABASE'; \
             export MYSQL_USER='$MYSQL_USER'; \
             export MYSQL_PASSWORD='$MYSQL_PASSWORD'; \
             bash -s" << 'EOF'
            set -e

            BRANCH_NAME="${{ github.ref_name }}"
            # ensure branch name is not empty
            if [ -z "${BRANCH_NAME}" ]; then
              echo "‚ùå BRANCH_NAME is empty; cannot continue."
              exit 1
            fi

            if [ "\$BRANCH_NAME" = "main" ]; then
              NAMESPACE="cloudnative"
              IMAGE_TAG="latest"
              NAMESPACE_FILE="k8s/namespace-prod.yaml"
              INGRESS_FILE="k8s/ingress-prod.yaml"
            else
              NAMESPACE="cloudnative-dev"
              IMAGE_TAG="dev"
              NAMESPACE_FILE="k8s/namespace-dev.yaml"
              INGRESS_FILE="k8s/ingress-dev.yaml"
            fi

            echo "üìÅ Á¢∫Ë™çÂ∞àÊ°à"
            if [ ! -d ~/Cloud-Native-final ]; then
              git clone https://github.com/${{ github.repository }}.git ~/Cloud-Native-final
            fi

            cd ~/Cloud-Native-final
            git fetch origin
            
            # üî• Âº∑Âà∂Ë¶ÜËìãÊú¨Âú∞ÊâÄÊúâËÆäÊõ¥
            git reset --hard
            git clean -fd

            git checkout $BRANCH_NAME
            git reset --hard "origin/${BRANCH_NAME}"
            
            # üê≥ ÂèñÂæó GHCR digestÔºàÈúÄË¶Å skopeo + jqÔºâ
            FRONTEND_IMAGE="ghcr.io/fakraze/cloud-meal-frontend"
            BACKEND_IMAGE="ghcr.io/fakraze/cloud-meal-backend"

            echo "üîç ÊäìÂèñ digest..."
            FRONTEND_DIGEST=$(skopeo inspect docker://$FRONTEND_IMAGE:$IMAGE_TAG | jq -r '.Digest')
            BACKEND_DIGEST=$(skopeo inspect docker://$BACKEND_IMAGE:$IMAGE_TAG | jq -r '.Digest')
            
            echo "‚úÖ Frontend Digest: $FRONTEND_DIGEST"
            echo "‚úÖ Backend Digest:  $BACKEND_DIGEST"
            
            echo "üì¶ Ê≥®ÂÖ•Ê≠£Á¢∫ GHCR image digest"
            # ‚¨áÔ∏è ‰ΩøÁî® digest Âèñ‰ª£ÂéüÊú¨ÁöÑ imageÔºàÊõ¥ÂÆâÂÖ®Ôºâ
            sed -i "s|image: .*cloud-meal-frontend.*|image: $FRONTEND_IMAGE@$FRONTEND_DIGEST|" k8s/frontend-deployment.yaml
            sed -i "s|image: .*cloud-meal-backend.*|image: $BACKEND_IMAGE@$BACKEND_DIGEST|" k8s/backend-deployment.yaml
            
            echo "üöÄ Deploying to $NAMESPACE"
            sudo k3s kubectl apply -f $NAMESPACE_FILE
            
            # Deploy MySQL Database first
            echo "üîÑ Deploying MySQL database..."
            
            # Create base64 encoded secrets from GitHub secrets
            MYSQL_ROOT_PASSWORD_BASE64=$(echo -n "${MYSQL_ROOT_PASSWORD}" | base64 -w 0)
            MYSQL_DATABASE_BASE64=$(echo -n "${MYSQL_DATABASE}" | base64 -w 0)
            MYSQL_USER_BASE64=$(echo -n "${MYSQL_USER}" | base64 -w 0)
            MYSQL_PASSWORD_BASE64=$(echo -n "${MYSQL_PASSWORD}" | base64 -w 0)
            
            # Create secret template
            cat k8s/mysql/mysql-secrets.yaml | \
              sed "s|\${MYSQL_ROOT_PASSWORD_BASE64}|$MYSQL_ROOT_PASSWORD_BASE64|g" | \
              sed "s|\${MYSQL_DATABASE_BASE64}|$MYSQL_DATABASE_BASE64|g" | \
              sed "s|\${MYSQL_USER_BASE64}|$MYSQL_USER_BASE64|g" | \
              sed "s|\${MYSQL_PASSWORD_BASE64}|$MYSQL_PASSWORD_BASE64|g" \
              > k8s/mysql/mysql-secrets-rendered.yaml
            
            # Apply secrets first
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-secrets-rendered.yaml
            
            # Apply MySQL resources
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-pvc.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-service.yaml
            
            # Wait for MySQL to be ready before deploying backend
            echo "‚è≥ Waiting for MySQL to be ready..."
            MYSQL_READY=false
            ATTEMPTS=0
            MAX_ATTEMPTS=15
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              if sudo k3s kubectl get pods -n $NAMESPACE -l app=mysql --no-headers | grep "Running" > /dev/null; then
                echo "‚úÖ MySQL is running, checking readiness..."
                if sudo k3s kubectl get pods -n $NAMESPACE -l app=mysql -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep "true" > /dev/null; then
                  echo "‚úÖ MySQL is ready!"
                  MYSQL_READY=true
                  break
                fi
              fi
              echo "‚åõ MySQL not ready yet, waiting..."
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 10
            done
              # Deploy Backend and Frontend
            echo "üîÑ Deploying backend and frontend..."
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-service.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-service.yaml
              # Apply stripprefix middlewares for dev environment
            if [ "\$BRANCH_NAME" != "main" ]; then
              echo "üîß Applying stripprefix middlewares..."
              if [ -f "k8s/frontend-stripprefix.yaml" ]; then
                sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-stripprefix.yaml
              else
                echo "‚ö†Ô∏è  frontend-stripprefix.yaml not found"
              fi
              
              if [ -f "k8s/backend-stripprefix.yaml" ]; then
                sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-stripprefix.yaml
              else
                echo "‚ö†Ô∏è  backend-stripprefix.yaml not found"
              fi
            fi
              
            sudo k3s kubectl apply -n $NAMESPACE -f $INGRESS_FILE
            
            # Force restart deployments to ensure new images are pulled
            echo "üîÑ Force restarting deployments..."
            sudo k3s kubectl rollout restart deployment/frontend -n $NAMESPACE
            sudo k3s kubectl rollout restart deployment/backend -n $NAMESPACE
            
            # Wait for rollouts to complete
            echo "‚è≥ Waiting for frontend rollout to complete..."
            sudo k3s kubectl rollout status deployment/frontend -n $NAMESPACE --timeout=300s
            
            echo "‚è≥ Waiting for backend rollout to complete..."
            sudo k3s kubectl rollout status deployment/backend -n $NAMESPACE --timeout=300s
            
            echo "üîç Frontend Ê≠£Âú®‰ΩøÁî®ÁöÑ imageÔºö"
            sudo k3s kubectl get deployment frontend -n $NAMESPACE -o=jsonpath='{.spec.template.spec.containers[0].image}'
            echo

            echo "üîç Backend Ê≠£Âú®‰ΩøÁî®ÁöÑ imageÔºö"
            sudo k3s kubectl get deployment backend -n $NAMESPACE -o=jsonpath='{.spec.template.spec.containers[0].image}'
            echo


            echo "üïê Á≠âÂæÖ Pod ÂïüÂãï‰∏≠..."
            ATTEMPTS=0
            MAX_ATTEMPTS=20

            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              NOT_READY=$(sudo k3s kubectl get pods -n $NAMESPACE --no-headers | grep -v "Running" | wc -l)
              if [ "$NOT_READY" -eq 0 ]; then
                echo "‚úÖ ÊâÄÊúâ Pod ÈÉΩÂ∑≤ÊàêÂäüÂïüÂãïÔºÅ"
                break
              fi
              echo "‚åõ Â∞öÊúâ $NOT_READY ÂÄã Pod Êú™Â∞±Á∑íÔºåÁ≠âÂæÖ‰∏≠..."
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 5
            done

            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå ÈÉ®ÁΩ≤Â§±ÊïóÔºöPod Ë∂ÖÊôÇÊú™ÂïüÂãïÊàêÂäü"
              echo "üì¶ Áï∂Ââç Pod ÁãÄÊÖãÔºö"
              sudo k3s kubectl get pods -n $NAMESPACE

              echo "ü©∫ Âç∞Âá∫Èùû Running ÁöÑ Pod Ë©≥Á¥∞Ë®äÊÅØÔºö"
              for pod in $(sudo k3s kubectl get pods -n $NAMESPACE --no-headers | grep -v "Running" | awk '{print $1}'); do
                echo "üîç Logs for $pod:"
                sudo k3s kubectl logs $pod -n $NAMESPACE || true

                echo "üîé Describe for $pod:"
                sudo k3s kubectl describe pod $pod -n $NAMESPACE || true
              done              
              
              exit 1
            fi            
            
            echo "‚úÖ All pods started successfully!"
            
            # Health check for API endpoint with restart retry logic
            echo "üè• Performing API health check with auto-restart (max 5 restarts)..."
            
            # Set API URL based on environment
            if [ "\$BRANCH_NAME" = "main" ]; then
              API_URL="http://13.218.27.133/backend/api/"
            else
              API_URL="http://13.218.27.133/dev/backend/api/"
            fi
            
            echo "üì° Testing API endpoint: $API_URL"
            
            # Initial API test
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ API health check passed! Status: $HTTP_STATUS"
            else
              echo "‚ùå Initial API health check failed! Status: $HTTP_STATUS"
              
              # Restart and retry logic: maximum 5 restart attempts
              RESTART_SUCCESS=false
              for restart_attempt in 1 2 3 4 5; do
                echo "üîÑ Restart attempt $restart_attempt/5..."
                echo "üîÑ Restarting deployments..."
                
                sudo k3s kubectl rollout restart deployment/frontend -n $NAMESPACE
                sudo k3s kubectl rollout restart deployment/backend -n $NAMESPACE
                
                echo "‚è≥ Waiting for restart to complete..."
                sudo k3s kubectl rollout status deployment/frontend -n $NAMESPACE --timeout=300s
                sudo k3s kubectl rollout status deployment/backend -n $NAMESPACE --timeout=300s
                
                # Wait a bit for services to stabilize
                echo "‚è≥ Waiting for services to stabilize..."
                sleep 15
                
                # Test API after restart
                echo "üîç Testing API after restart attempt $restart_attempt..."
                HTTP_STATUS_RETRY=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")
                
                if [ "$HTTP_STATUS_RETRY" = "200" ]; then
                  echo "‚úÖ API recovered after restart attempt $restart_attempt! Status: $HTTP_STATUS_RETRY"
                  RESTART_SUCCESS=true
                  break
                else
                  echo "‚ùå API still failing after restart attempt $restart_attempt. Status: $HTTP_STATUS_RETRY"
                  if [ $restart_attempt -lt 5 ]; then
                    echo "‚è≥ Waiting 5 seconds before next restart attempt..."
                    sleep 5
                  fi
                fi
              done
              
              # Final result
              if [ "$RESTART_SUCCESS" = "false" ]; then
                echo "üí• API failed to recover after 5 restart attempts!"
                echo "‚ö†Ô∏è  Manual investigation may be required."
                echo "üì¶ Current pod status:"
                sudo k3s kubectl get pods -n $NAMESPACE
              else
                echo "üéâ API successfully recovered!"
              fi
            fi
            
            echo "‚úÖ Done."
          EOF
    
  backend-e2e-tests: 
    name: CD - Backend E2E Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ success() && (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Configure E2E test environment
        working-directory: backend
        run: |
          # Set API URL based on branch
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "E2E_API_URL=http://13.218.27.133/backend/api" >> $GITHUB_ENV
          else
            echo "E2E_API_URL=http://13.218.27.133/dev/backend/api" >> $GITHUB_ENV
          fi

      - name: Wait for API to be ready
        run: |
          echo "üîç Waiting for API to be ready at: ${{ env.E2E_API_URL }}"
          ATTEMPTS=0
          MAX_ATTEMPTS=30
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.E2E_API_URL }}/" || echo "000")
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ API is ready! Status: $HTTP_STATUS"
              break
            fi
            echo "‚åõ API not ready yet (Status: $HTTP_STATUS). Attempt $((ATTEMPTS+1))/$MAX_ATTEMPTS"
            ATTEMPTS=$((ATTEMPTS+1))
            sleep 10
          done
          
          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå API failed to become ready after $MAX_ATTEMPTS attempts"
            exit 1
          fi      
      
      - name: Run backend E2E tests
        working-directory: backend
        env:
          E2E_API_BASE_URL: ${{ env.E2E_API_URL }}
        run: |
          echo "üß™ Running E2E tests against: ${{ env.E2E_API_URL }}"
          npm run test:e2e
        continue-on-error: true  # E2EÊµãËØïÂ§±Ë¥•‰∏çÂ∫îËØ•ÈòªÊ≠¢pipelineÔºå‰ΩÜ‰ºöÊ†áËÆ∞‰∏∫Ë≠¶Âëä

      - name: Upload backend E2E Artifacts
        if: always()  # Êó†ËÆ∫ÊàêÂäüÂ§±Ë¥•ÈÉΩ‰∏ä‰º†ÁªìÊûú
        uses: actions/upload-artifact@v4
        with:
          name: backend-e2e-artifacts-${{ github.run_number }}
          path: |
            backend/test-results/
            backend/coverage/
          retention-days: 30

  # cypress-e2e-tests:
  #   name: CD - E2E Cypress Tests
  #   runs-on: ubuntu-latest
  #   needs: deploy

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Use Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18

  #     - name: Install dependencies
  #       working-directory: test
  #       run: npm ci

  #     - name: Run Cypress tests
  #       working-directory: test
  #       run: npm run test

  #     - name: Upload Cypress Artifacts
  #       if: failure()
  #        uses: actions/upload-artifact@v4
  #       with:
  #         name: cypress-artifacts
  #         path: |
  #           test/cypress/videos
  #           test/cypress/screenshots
