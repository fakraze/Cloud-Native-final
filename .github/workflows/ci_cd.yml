name: CI/CD - Build, Push & Deploy

on:
  push:
    branches:
      - "**"

jobs:
  build-and-push:
    name: CD - Build & Push Images
    runs-on: ubuntu-latest
    if: ${{ (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u fakraze --password-stdin

      - name: Set image tag
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "develop" || "${GITHUB_REF_NAME}" == 'ci-cd' ]]; then
            echo "IMAGE_TAG=dev" >> $GITHUB_ENV
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "IMAGE_TAG=ci-${SHORT_SHA}" >> $GITHUB_ENV
          fi

      - name: Build & Push Frontend
        run: | # 根據分支設定 VITE_BASE_PATH 和 API_BASE_URL
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            BASE_PATH="/"
            BUILD_MODE="production"
            API_BASE_URL="http://backend/api"
          else
            BASE_PATH="/dev/frontend/"
            BUILD_MODE="development"
            API_BASE_URL="http://backend/api"
          fi

          echo "📦 Building with:"
          echo "    VITE_BASE_PATH=$BASE_PATH"
          echo "    VITE_API_BASE_URL=$API_BASE_URL"
          echo "    BUILD_MODE=$BUILD_MODE"
          echo "    IMAGE_TAG=${{ env.IMAGE_TAG }}"

          docker build \
            --build-arg VITE_BASE_PATH=$BASE_PATH \
            --build-arg VITE_API_BASE_URL=$API_BASE_URL \
            --build-arg BUILD_MODE=$BUILD_MODE \
            -t ghcr.io/fakraze/cloud-meal-frontend:${{ env.IMAGE_TAG }} \
            ./frontend

          docker push ghcr.io/fakraze/cloud-meal-frontend:${{ env.IMAGE_TAG }}

      - name: Build & Push Backend
        run: |
          # Set backend environment variables based on branch
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            NODE_ENV="production"
            DB_HOST="mysql-service"
          else
            NODE_ENV="development"
            DB_HOST="mysql-service"
          fi

          echo "📦 Building backend with:"
          echo "    NODE_ENV=$NODE_ENV"
          echo "    DB_HOST=$DB_HOST"
          echo "    IMAGE_TAG=${{ env.IMAGE_TAG }}"

          docker build \
            --build-arg NODE_ENV=$NODE_ENV \
            --build-arg DB_HOST=$DB_HOST \
            --build-arg DB_PORT=3306 \
            --build-arg DB_DATABASE=finaldb \
            --build-arg DB_USERNAME=finaluser \
            --build-arg DB_PASSWORD=finalpwd \
            --build-arg BACKEND_PORT=3000 \
            -t ghcr.io/fakraze/cloud-meal-backend:${{ env.IMAGE_TAG }} \
            ./backend

          docker push ghcr.io/fakraze/cloud-meal-backend:${{ env.IMAGE_TAG }}
  deploy:
    name: CD - Deploy to K3s
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ success() && (github.ref_name == 'main' || github.ref_name == 'develop' || github.ref_name == 'ci-cd') }}

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ec2-13-218-27-133.compute-1.amazonaws.com >> ~/.ssh/known_hosts

      - name: SSH and deploy to K3s
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          # Pass environment variables to SSH session
          ssh -i ~/.ssh/id_rsa ubuntu@ec2-13-218-27-133.compute-1.amazonaws.com \
            "export MYSQL_ROOT_PASSWORD='$MYSQL_ROOT_PASSWORD'; \
             export MYSQL_DATABASE='$MYSQL_DATABASE'; \
             export MYSQL_USER='$MYSQL_USER'; \
             export MYSQL_PASSWORD='$MYSQL_PASSWORD'; \
             bash -s" << 'EOF'
            set -e

            BRANCH_NAME="${{ github.ref_name }}"
            # ensure branch name is not empty
            if [ -z "${BRANCH_NAME}" ]; then
              echo "❌ BRANCH_NAME is empty; cannot continue."
              exit 1
            fi

            if [ "\$BRANCH_NAME" = "main" ]; then
              NAMESPACE="cloudnative"
              IMAGE_TAG="latest"
              NAMESPACE_FILE="k8s/namespace-prod.yaml"
              INGRESS_FILE="k8s/ingress-prod.yaml"
            else
              NAMESPACE="cloudnative-dev"
              IMAGE_TAG="dev"
              NAMESPACE_FILE="k8s/namespace-dev.yaml"
              INGRESS_FILE="k8s/ingress-dev.yaml"
            fi

            echo "📁 確認專案"
            if [ ! -d ~/Cloud-Native-final ]; then
              git clone https://github.com/${{ github.repository }}.git ~/Cloud-Native-final
            fi

            cd ~/Cloud-Native-final
            git fetch origin
            
            # 🔥 強制覆蓋本地所有變更
            git reset --hard
            git clean -fd

            git checkout $BRANCH_NAME
            git reset --hard "origin/${BRANCH_NAME}"
            
            # 🐳 取得 GHCR digest（需要 skopeo + jq）
            FRONTEND_IMAGE="ghcr.io/fakraze/cloud-meal-frontend"
            BACKEND_IMAGE="ghcr.io/fakraze/cloud-meal-backend"

            echo "🔍 抓取 digest..."
            FRONTEND_DIGEST=$(skopeo inspect docker://$FRONTEND_IMAGE:$IMAGE_TAG | jq -r '.Digest')
            BACKEND_DIGEST=$(skopeo inspect docker://$BACKEND_IMAGE:$IMAGE_TAG | jq -r '.Digest')
            
            echo "✅ Frontend Digest: $FRONTEND_DIGEST"
            echo "✅ Backend Digest:  $BACKEND_DIGEST"
            
            echo "📦 注入正確 GHCR image digest"
            # ⬇️ 使用 digest 取代原本的 image（更安全）
            sed -i "s|image: .*cloud-meal-frontend.*|image: $FRONTEND_IMAGE@$FRONTEND_DIGEST|" k8s/frontend-deployment.yaml
            sed -i "s|image: .*cloud-meal-backend.*|image: $BACKEND_IMAGE@$BACKEND_DIGEST|" k8s/backend-deployment.yaml
            
            echo "🚀 Deploying to $NAMESPACE"
            sudo k3s kubectl apply -f $NAMESPACE_FILE
            
            # Deploy MySQL Database first
            echo "🔄 Deploying MySQL database..."
            
            # Create base64 encoded secrets from GitHub secrets
            MYSQL_ROOT_PASSWORD_BASE64=$(echo -n "${MYSQL_ROOT_PASSWORD}" | base64 -w 0)
            MYSQL_DATABASE_BASE64=$(echo -n "${MYSQL_DATABASE}" | base64 -w 0)
            MYSQL_USER_BASE64=$(echo -n "${MYSQL_USER}" | base64 -w 0)
            MYSQL_PASSWORD_BASE64=$(echo -n "${MYSQL_PASSWORD}" | base64 -w 0)
            
            # Create secret template
            cat k8s/mysql/mysql-secrets.yaml | \
              sed "s|\${MYSQL_ROOT_PASSWORD_BASE64}|$MYSQL_ROOT_PASSWORD_BASE64|g" | \
              sed "s|\${MYSQL_DATABASE_BASE64}|$MYSQL_DATABASE_BASE64|g" | \
              sed "s|\${MYSQL_USER_BASE64}|$MYSQL_USER_BASE64|g" | \
              sed "s|\${MYSQL_PASSWORD_BASE64}|$MYSQL_PASSWORD_BASE64|g" \
              > k8s/mysql/mysql-secrets-rendered.yaml
            
            # Apply secrets first
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-secrets-rendered.yaml
            
            # Apply MySQL resources
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-pvc.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/mysql/mysql-service.yaml
            
            # Wait for MySQL to be ready before deploying backend
            echo "⏳ Waiting for MySQL to be ready..."
            MYSQL_READY=false
            ATTEMPTS=0
            MAX_ATTEMPTS=15
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              if sudo k3s kubectl get pods -n $NAMESPACE -l app=mysql --no-headers | grep "Running" > /dev/null; then
                echo "✅ MySQL is running, checking readiness..."
                if sudo k3s kubectl get pods -n $NAMESPACE -l app=mysql -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep "true" > /dev/null; then
                  echo "✅ MySQL is ready!"
                  MYSQL_READY=true
                  break
                fi
              fi
              echo "⌛ MySQL not ready yet, waiting..."
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 10
            done
            
            # Deploy Backend and Frontend
            echo "🔄 Deploying backend and frontend..."
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/backend-service.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-deployment.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f k8s/frontend-service.yaml
            sudo k3s kubectl apply -n $NAMESPACE -f $INGRESS_FILE
            
            echo "🔍 Frontend 正在使用的 image："
            sudo k3s kubectl get deployment frontend -n $NAMESPACE -o=jsonpath='{.spec.template.spec.containers[0].image}'
            echo

            echo "🔍 Backend 正在使用的 image："
            sudo k3s kubectl get deployment backend -n $NAMESPACE -o=jsonpath='{.spec.template.spec.containers[0].image}'
            echo


            echo "🕐 等待 Pod 啟動中..."
            ATTEMPTS=0
            MAX_ATTEMPTS=20

            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              NOT_READY=$(sudo k3s kubectl get pods -n $NAMESPACE --no-headers | grep -v "Running" | wc -l)
              if [ "$NOT_READY" -eq 0 ]; then
                echo "✅ 所有 Pod 都已成功啟動！"
                break
              fi
              echo "⌛ 尚有 $NOT_READY 個 Pod 未就緒，等待中..."
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 5
            done

            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "❌ 部署失敗：Pod 超時未啟動成功"
              echo "📦 當前 Pod 狀態："
              sudo k3s kubectl get pods -n $NAMESPACE

              echo "🩺 印出非 Running 的 Pod 詳細訊息："
              for pod in $(sudo k3s kubectl get pods -n $NAMESPACE --no-headers | grep -v "Running" | awk '{print $1}'); do
                echo "🔍 Logs for $pod:"
                sudo k3s kubectl logs $pod -n $NAMESPACE || true

                echo "🔎 Describe for $pod:"
                sudo k3s kubectl describe pod $pod -n $NAMESPACE || true
              done

              exit 1
            fi

            echo "✅ Done."
          EOF

  e2e-tests:
    name: CD - E2E Cypress Tests
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: test
        run: npm install

      - name: Run Cypress tests
        working-directory: test
        run: npm run test

      - name: Upload Cypress Artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-artifacts
          path: |
            test/cypress/videos
            test/cypress/screenshots
